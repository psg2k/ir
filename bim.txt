import re
import os
import math
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from nltk.stem import PorterStemmer
from collections import defaultdict

ps = PorterStemmer()

def preprocess(text):
    text = text.lower()
    tokens = re.findall(r'\b\w+\b', text)
    stemmed_tokens = []
    for t in tokens:
        stemmed_tokens.append(ps.stem(t))
    return stemmed_tokens

def load_and_preprocess_docs(file_paths):
    documents = {}
    for path in file_paths:
        doc_id = os.path.splitext(os.path.basename(path))[0]
        with open(path, 'r', encoding='utf-8') as f:
            documents[doc_id] = preprocess(f.read())
    return documents

def compute_df(processed_docs):
    df = defaultdict(int)
    for tokens in processed_docs.values():
        unique_tokens = set(tokens)
        for token in unique_tokens:
            df[token] += 1
    return df

def compute_phase1_weights(df, N):
    weights = {}
    pk=0.5
    for term, dk in df.items():
        qk=(dk+0.5)/(N+1)
        weights[term] = math.log((pk) / (1-pk)) - math.log(qk/(1-qk))
    return weights

def compute_phase2_weights(df, processed_docs, relevant_docs, N):
    Nr = len(relevant_docs)
    rk_dict = defaultdict(int)
    for doc_id in relevant_docs:
        tokens = processed_docs.get(doc_id, [])
        unique_tokens = set(tokens)
        for token in unique_tokens:
            rk_dict[token] += 1

    weights = {}
    for term, dk in df.items():
        rk = rk_dict.get(term, 0)
        pk=(rk+0.5)/(Nr+1)
        qk=(dk-rk+0.5)/(N-Nr+1)
        if pk>0 and pk<1 and qk>0 and qk<1:
          weights[term] = math.log((pk) / (1-pk)) - math.log(qk/(1-qk))

    return weights

def score_docs(processed_docs, query_tokens, weights):
    scores = {}
    for doc_id, tokens in processed_docs.items():
        score = 0.0
        for t in query_tokens:
            if t in tokens and t in weights:
                score += weights[t]
        scores[doc_id] = score
    ranked = sorted(scores.items(), key=lambda x: x[1], reverse=True)
    return ranked

def plot_rsv_scores(ranked_docs, phase, query_id):
    docs = [doc_id for doc_id, score in ranked_docs]
    scores = [score for doc_id, score in ranked_docs]

    plt.figure(figsize=(8,5))
    plt.bar(docs, scores, color='lightcoral')
    plt.axhline(y=0, color='b', linestyle='--', label='Threshold (0)')
    plt.xlabel('Documents')
    plt.ylabel('RSV Score')
    plt.title(f'BIM RSV Scores ({phase}) for {query_id}')
    plt.legend()
    plt.show()

if not os.path.exists("docs"): os.makedirs("docs")
with open("docs/d1.txt", "w") as f: f.write("cat dog fish")

database_paths = ["docs/d1.txt", "docs/d2.txt", "docs/d3.txt", "docs/d4.txt"]
query_paths = ["docs/d5.txt"]

processed_db_docs = load_and_preprocess_docs(database_paths)
processed_query_docs = load_and_preprocess_docs(query_paths)

N = len(processed_db_docs)
df = compute_df(processed_db_docs)
weights_phase1 = compute_phase1_weights(df, N)

relevance = [
    'd5','d1', 'd2'
]

for doc_id, query_tokens in processed_query_docs.items():
    print(f"\n--- Query from '{doc_id}' ---")
    print(f"Query Tokens: {query_tokens}")

    ranked_docs_phase1 = score_docs(processed_db_docs, query_tokens, weights_phase1)
    print("\nPhase I (no relevance feedback) Ranking:")
    for db_id, score in ranked_docs_phase1:
        print(f"   {db_id}: {score:.4f}")
    plot_rsv_scores(ranked_docs_phase1, "Phase I", doc_id)
    
    top_2_results = ranked_docs_phase1[:2]
    relevant_docs = []
    for db_id, score in top_2_results:
        relevant_docs.append(db_id)

    if len(relevant_docs) > 0:
        print(f"\nUsing relevance feedback from: {relevant_docs}")
        weights_phase2 = compute_phase2_weights(df, processed_db_docs, relevant_docs, N)
        ranked_docs_phase2 = score_docs(processed_db_docs, query_tokens, weights_phase2)
        print("\nPhase II (with relevance feedback) Ranking:")
        for db_id, score in ranked_docs_phase2:
            print(f"   {db_id}: {score:.4f}")
        plot_rsv_scores(ranked_docs_phase2, "Phase II", doc_id)